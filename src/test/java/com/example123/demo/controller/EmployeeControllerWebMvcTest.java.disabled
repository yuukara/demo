package com.example123.demo.controller;

import static org.mockito.Mockito.when;
import static org.mockito.Mockito.anyInt;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Map;

import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
import org.springframework.test.context.ActiveProfiles;

import com.example123.demo.DemoApplication;
import com.example123.demo.service.EmployeeService;

/**
 * EmployeeController WebMVC テストクラス
 * MockMvcを使用してHTTPエンドポイントの動作を確認します
 */
@WebMvcTest(controllers = EmployeeController.class, excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = DemoApplication.class))
@ActiveProfiles("test")
public class EmployeeControllerWebMvcTest {

    private static final Logger log = LoggerFactory.getLogger(EmployeeControllerWebMvcTest.class);

    @Autowired
    private MockMvc mockMvc;

    @MockitoBean
    private EmployeeService employeeService;

    @Test
    public void testMergeUpsertEndpoint() throws Exception {
        log.info("Testing MERGE-based UPSERT API endpoint...");
        
        // MockMvcを使用してHTTPリクエストをシミュレート
        mockMvc.perform(post("/api/employees/test-merge-upsert")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.method").value("MERGE-based UPSERT"))
                .andExpect(jsonPath("$.status").value("completed"))
                .andExpect(jsonPath("$.executionTime").exists());
        
        log.info("MERGE-based UPSERT API endpoint test - SUCCESS");
    }

    @Test
    public void testTempTableUpsertEndpoint() throws Exception {
        log.info("Testing Temp Table-based UPSERT API endpoint...");
        
        // サービスのモック設定
        Map<String, Integer> mockResult = Map.of("updateCount", 3000, "insertCount", 3000);
        when(employeeService.generateAndUpsertRandomEmployeesViaTempTable(anyInt()))
                .thenReturn(mockResult);

        
        // MockMvcを使用してHTTPリクエストをシミュレート
        mockMvc.perform(post("/api/employees/test-temp-table-upsert")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.method").value("Temp Table-based UPSERT"))
                .andExpect(jsonPath("$.status").value("completed"))
                .andExpect(jsonPath("$.executionTime").exists())
                .andExpect(jsonPath("$.updateCount").value(3000))
                .andExpect(jsonPath("$.insertCount").value(3000));
        
        log.info("Temp Table-based UPSERT API endpoint test - SUCCESS");
    }

    @Test
    public void testApiEndpointsExistAndAreAccessible() throws Exception {
        log.info("Testing that API endpoints exist and are accessible...");
        
        // エンドポイントがアクセス可能であることを確認
        mockMvc.perform(post("/api/employees/test-merge-upsert"))
                .andExpect(status().isOk());
        
        mockMvc.perform(post("/api/employees/test-temp-table-upsert"))
                .andExpect(status().isOk());
        
        log.info("API endpoints accessibility test - SUCCESS");
    }
}